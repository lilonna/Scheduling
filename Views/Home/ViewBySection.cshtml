@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Schedules by Section";

}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

@functions {
    string FormatTime(DateTime dateTime)
    {
        return dateTime.ToString("hh:mm tt");
    }
}
<div class="container mt-4">
    @* <h1 class="text-center mb-4">Schedules by Section </h1> *@




    @foreach (var batch in Model)
    {
        <div class="mb-2">
          

            @foreach (var sectionGroup in batch.Sections)
            {
                <div class="mb-2">
                    <h3 class="h4 mb-2 " > @sectionGroup.Section.Name</h3>

                    @{
                        var days = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var day = sched.TimeSlot.DaysOfWeek;
                            if (!days.Any(d => d.Id == day.Id))
                            {
                                days.Add(day);
                            }
                        }
                        days = days.OrderBy(d => d.Id).ToList();

                        var timeSlots = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var ts = sched.TimeSlot;
                            if (!timeSlots.Any(t => t.From == ts.From && t.To == ts.To))
                            {
                                timeSlots.Add(ts);
                            }
                        }
                        timeSlots = timeSlots.OrderBy(t => t.From).ToList();
                    }

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Time Slot</th>
                                    @foreach (var day in days)
                                    {
                                        <th class="text-center">@day.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var time in timeSlots)
                                {
                                    <tr>
                                        <td class="fw-semibold">
                                            <span tabindex="0"
                                                  class="text-dark"
                                                  role="button"
                                                  data-bs-toggle="popover"
                                                  data-bs-trigger="hover focus"
                                                  data-bs-placement="top"
                                                 
                                                  data-bs-content="@($"{FormatTime(time.From)} - {FormatTime(time.To)}")">
                                                @time.Name
                                            </span>
                                        </td>

                                        @foreach (var day in days)
                                        {
                                            var matchedSchedule = ((IEnumerable<dynamic>)sectionGroup.Schedules).FirstOrDefault(s =>
                                            s.TimeSlot.From == time.From &&
                                            s.TimeSlot.To == time.To &&
                                            s.TimeSlot.DaysOfWeek.Id == day.Id);

                                            <td class="schedule-cell text-center cursor-pointer transition"
                                                data-schedule-id="@matchedSchedule?.Id"
                                                data-section-id="@sectionGroup.Section.Id">

                                                @if (matchedSchedule != null)
                                                {
                                                    <div class="schedule-content">
                                                    
                                                        <div>
                                                            <a tabindex="0"
                                                               class="text-decoration-none text-primary"
                                                               role="button"
                                                               data-bs-toggle="popover"
                                                               data-bs-trigger="hover focus"
                                                               data-bs-placement="top"
                                                               title="Instructor"
                                                               data-bs-content="@matchedSchedule.Allocation.Instructor.FullName">
                                                                @matchedSchedule.Allocation.Course.Name
                                                            </a>


                                                        </div>
                                                        <div class="swap-switch mb-1" style="display:none;">
                                                            <small class="text-muted text-center d-block mt-1">
                                                                To swap schedules, turn this on and click the target schedule.
                                                            </small>
                                                            <div class="form-check form-switch d-flex justify-content-center">
                                                                <input class="form-check-input schedule-toggle" type="checkbox" id="swap-@matchedSchedule.Id">
                                                            </div>
                                                          
                                                        </div>
                                                    </div>


                                                }

                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
</div>
<div class="modal fade" id="swapFeedbackModal" tabindex="-1" aria-labelledby="swapFeedbackLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="swapFeedbackLabel">Swap Failed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="swapFeedbackBody">
            
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="confirmSwapModal" tabindex="-1" aria-labelledby="confirmSwapLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-primary">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmSwapLabel">Confirm Swap</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to swap the selected classes?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmSwapBtn" type="button" class="btn btn-primary">Yes, Swap</button>
            </div>
        </div>
    </div>
</div>
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
    <div id="swapSuccessToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body">
                Schedule successfully swapped!
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        let firstCell = null;
        let secondCell = null;
        let firstSwitchInput = null;
        document.querySelectorAll('[data-bs-toggle="popover"]').forEach(el => {
            new bootstrap.Popover(el);
        });

        function clearSelection(cell) {
            if (!cell) return;
            cell.classList.remove('table-info');
            const switchDiv = cell.querySelector('.swap-switch');
            const input = cell.querySelector('.schedule-toggle');
            if (switchDiv) switchDiv.style.display = 'none';
            if (input) input.checked = false;
        }

        document.querySelectorAll('.schedule-cell').forEach(cell => {
            const scheduleId = cell.dataset.scheduleId;
            if (!scheduleId) return;

            const switchDiv = cell.querySelector('.swap-switch');
            const switchInput = cell.querySelector('.schedule-toggle');

            cell.addEventListener('click', function () {
                if (!firstCell) {
                    firstCell = cell;
                    firstSwitchInput = switchInput;
                    cell.classList.add('table-info');
                    if (switchDiv) switchDiv.style.display = 'block';
                    return;
                }

                if (cell === firstCell) return;

                if (!firstSwitchInput?.checked) {
                    clearSelection(firstCell);
                    firstCell = cell;
                    firstSwitchInput = switchInput;
                    cell.classList.add('table-info');
                    if (switchDiv) switchDiv.style.display = 'block';
                    return;
                }
                if (firstCell.dataset.sectionId !== cell.dataset.sectionId) {
                    alert("You can only swap within the same section.");
                    clearSelection(firstCell);
                    firstCell = firstSwitchInput = null;
                    return;
                }

                secondCell = cell;
                new bootstrap.Modal(document.getElementById('confirmSwapModal')).show();
            });

            if (switchInput) {
                switchInput.addEventListener('change', function () {
                    if (switchInput.checked) {
                        firstCell = cell;
                        firstSwitchInput = switchInput;
                        cell.classList.add('table-info');
                    } else {
                        clearSelection(cell);
                        firstCell = firstSwitchInput = null;
                    }
                });
            }
        });

        document.getElementById('confirmSwapBtn').addEventListener('click', function () {
            const firstId = firstCell?.dataset.scheduleId;
            const secondId = secondCell?.dataset.scheduleId;

            if (!firstId || !secondId) return;

            fetch(`/Home/SwapSchedules?scheduleId1=${firstId}&scheduleId2=${secondId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        const toast = new bootstrap.Toast(document.getElementById("swapSuccessToast"));
                        toast.show();
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        document.getElementById("swapFeedbackBody").innerHTML =
                            data.errors.map(e => `<div class="text-danger mb-2">• ${e}</div>`).join("");
                        new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                    }
                })
                .catch(err => {
                    document.getElementById("swapFeedbackBody").innerHTML =
                        `<div class="text-danger">An unexpected error occurred: ${err}</div>`;
                    new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                })
                .finally(() => {
                    bootstrap.Modal.getInstance(document.getElementById('confirmSwapModal')).hide();
                    clearSelection(firstCell);
                    clearSelection(secondCell);
                    firstCell = secondCell = firstSwitchInput = null;
                });
        });
        
        document.getElementById('confirmSwapModal').addEventListener('hidden.bs.modal', function () {
            clearSelection(firstCell);
            clearSelection(secondCell);
            firstCell = secondCell = firstSwitchInput = null;
        });


    });


</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
