@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Schedules by Section";
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Schedules by Section</h1>

    <div class="form-check form-switch mb-4">
        <input class="form-check-input" type="checkbox" id="swapModeToggle">
        <label class="form-check-label" for="swapModeToggle">Enable Swap Mode</label>
    </div>

    <div id="swapHint" class="text-info fst-italic mb-4" style="display:none;">
        Swap Mode is ON. Select two schedules within the same section to swap.
    </div>

    @foreach (var batch in Model)
    {
        <div class="mb-5">
            <h2 class="mb-4">Batch: @batch.BatchName</h2>

            @foreach (var sectionGroup in batch.Sections)
            {
                <div class="mb-4">
                    <h3 class="h4 mb-3">Section: @sectionGroup.Section.Name</h3>

                    @{
                        var days = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var day = sched.TimeSlot.DaysOfWeek;
                            if (!days.Any(d => d.Id == day.Id))
                            {
                                days.Add(day);
                            }
                        }
                        days = days.OrderBy(d => d.Id).ToList();

                        var timeSlots = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var ts = sched.TimeSlot;
                            if (!timeSlots.Any(t => t.From == ts.From && t.To == ts.To))
                            {
                                timeSlots.Add(ts);
                            }
                        }
                        timeSlots = timeSlots.OrderBy(t => t.From).ToList();
                    }

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Time Slot</th>
                                    @foreach (var day in days)
                                    {
                                        <th class="text-center">@day.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var time in timeSlots)
                                {
                                    <tr>
                                        <td class="fw-semibold">@($"{time.From:hh\\:mm} - {time.To:hh\\:mm}")</td>
                                        @foreach (var day in days)
                                        {
                                            var matchedSchedule = ((IEnumerable<dynamic>)sectionGroup.Schedules).FirstOrDefault(s =>
                                            s.TimeSlot.From == time.From &&
                                            s.TimeSlot.To == time.To &&
                                            s.TimeSlot.DaysOfWeek.Id == day.Id);

                                            <td class="schedule-cell text-center"
                                                data-schedule-id="@matchedSchedule?.Id"
                                                data-section-id="@sectionGroup.Section.Id">
                                                @if (matchedSchedule != null)
                                                {
                                                    <div class="schedule-content">
                                                        <a tabindex="0"
                                                           class="text-decoration-none text-primary"
                                                           role="button"
                                                           data-bs-toggle="popover"
                                                           data-bs-trigger="hover focus"
                                                           title="Instructor"
                                                           data-bs-content="@matchedSchedule.Allocation.Instructor.FullName">
                                                            @matchedSchedule.Allocation.Course.Name
                                                        </a>
                                                    </div>
                                                    <div class="swap-switch" style="display:none;">
                                                        <div class="form-check form-switch d-flex justify-content-center mt-2">
                                                            <input class="form-check-input schedule-toggle" type="checkbox" id="swap-@matchedSchedule.Id">
                                                            <label class="form-check-label ms-2" for="swap-@matchedSchedule.Id">Swap</label>
                                                        </div>
                                                    </div>

                                                }

                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
</div>

<!-- Feedback Modal -->
<div class="modal fade" id="swapFeedbackModal" tabindex="-1" aria-labelledby="swapFeedbackLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="swapFeedbackLabel">Swap Failed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="swapFeedbackBody">
                <!-- Error content will be injected here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirm Swap Modal -->
<div class="modal fade" id="confirmSwapModal" tabindex="-1" aria-labelledby="confirmSwapLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-primary">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmSwapLabel">Confirm Swap</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to swap the selected classes?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmSwapBtn" type="button" class="btn btn-primary">Yes, Swap</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Activate popovers
        document.querySelectorAll('[data-bs-toggle="popover"]').forEach(el => {
            new bootstrap.Popover(el, { container: 'body', html: true });
        });

        let selectedCells = [];
        let scheduleIds = [];

        function resetSelection() {
            selectedCells.forEach(c => {
                c.classList.remove('table-info');
                const switchDiv = c.querySelector('.swap-switch');
                if (switchDiv) switchDiv.style.display = 'none';
            });
            selectedCells = [];
            scheduleIds = [];
        }

        document.querySelectorAll('.schedule-cell').forEach(cell => {
            cell.addEventListener('click', function () {
                const isSwapMode = document.getElementById('swapModeToggle').checked;
                if (!isSwapMode) return;

                const scheduleId = this.dataset.scheduleId;
                const sectionId = this.dataset.sectionId;
                if (!scheduleId) return;

                if (selectedCells.includes(this)) return;

                this.classList.add('table-info');
                const switchDiv = this.querySelector('.swap-switch');
                if (switchDiv) switchDiv.style.display = 'block';

                selectedCells.push(this);

                if (selectedCells.length === 2) {
                    const [c1, c2] = selectedCells;
                    if (c1.dataset.sectionId !== c2.dataset.sectionId) {
                        alert("You can only swap schedules within the same section.");
                        resetSelection();
                        return;
                    }

                    scheduleIds = [c1.dataset.scheduleId, c2.dataset.scheduleId];
                    new bootstrap.Modal(document.getElementById('confirmSwapModal')).show();
                }
            });

        });

        document.getElementById('confirmSwapBtn').addEventListener('click', function () {
            const [id1, id2] = scheduleIds;
            fetch(`/Home/SwapSchedules?scheduleId1=${id1}&scheduleId2=${id2}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        document.getElementById("swapFeedbackBody").innerHTML =
                            data.errors.map(e => `<div class="text-danger mb-2">• ${e}</div>`).join("");
                        new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                    }
                })
                .catch(err => {
                    document.getElementById("swapFeedbackBody").innerHTML =
                        `<div class="text-danger">An unexpected error occurred: ${err}</div>`;
                    new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                })
                .finally(() => {
                    bootstrap.Modal.getInstance(document.getElementById('confirmSwapModal')).hide();
                    resetSelection();
                });
        });
        const confirmModalEl = document.getElementById('confirmSwapModal');
        confirmModalEl.addEventListener('hidden.bs.modal', function () {
            resetSelection();
        });

    });
</script>

