@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Schedules by Section";
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Schedules by Section</h1>

    @foreach (var batch in Model)
    {
        <div class="mb-5">
            <h2 class="mb-4">Batch: @batch.BatchName</h2>

            @foreach (var sectionGroup in batch.Sections)
            {
                <div class="mb-4">
                    <h3 class="h4 mb-3">Section: @sectionGroup.Section.Name</h3>

                    @{
                        var days = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var day = sched.TimeSlot.DaysOfWeek;
                            if (!days.Any(d => d.Id == day.Id))
                            {
                                days.Add(day);
                            }
                        }
                        days = days.OrderBy(d => d.Id).ToList();

                        var timeSlots = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var ts = sched.TimeSlot;
                            if (!timeSlots.Any(t => t.From == ts.From && t.To == ts.To))
                            {
                                timeSlots.Add(ts);
                            }
                        }
                        timeSlots = timeSlots.OrderBy(t => t.From).ToList();
                    }

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Time Slot</th>
                                    @foreach (var day in days)
                                    {
                                        <th class="text-center">@day.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var time in timeSlots)
                                {
                                    <tr>
                                        <td class="fw-semibold">@($"{time.From:hh\\:mm} - {time.To:hh\\:mm}")</td>

                                        @foreach (var day in days)
                                        {
                                            var matchedSchedule = ((IEnumerable<dynamic>)sectionGroup.Schedules).FirstOrDefault(s =>
                                            s.TimeSlot.From == time.From &&
                                            s.TimeSlot.To == time.To &&
                                            s.TimeSlot.DaysOfWeek.Id == day.Id);

                                            <td class="schedule-cell text-center"
                                                data-schedule-id="@matchedSchedule?.Id"
                                                data-section-id="@sectionGroup.Section.Id">
                                                @if (matchedSchedule != null)
                                                {
                                                    <a tabindex="0"
                                                       class="text-decoration-none text-primary"
                                                       role="button"
                                                       data-bs-toggle="popover"
                                                       data-bs-trigger="hover focus"
                                                       title="Instructor"
                                                       data-bs-content="@matchedSchedule.Allocation.Instructor.FullName">
                                                        @matchedSchedule.Allocation.Course.Name
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">-</span>
                                                }
                                            </td>

                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
</div>
<div id="swapHint" class="text-info fst-italic mt-2" style="display:none;">
    Schedule selected. Now select another from the same section to swap.
</div>


<!-- Feedback Modal -->
<div class="modal fade" id="swapFeedbackModal" tabindex="-1" aria-labelledby="swapFeedbackLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="swapFeedbackLabel">Swap Failed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="swapFeedbackBody">
                <!-- Error content will be injected here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
<!-- Confirm Swap Modal -->
<div class="modal fade" id="confirmSwapModal" tabindex="-1" aria-labelledby="confirmSwapLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-primary">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmSwapLabel">Confirm Swap</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to swap the selected classes?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmSwapBtn" type="button" class="btn btn-primary">Yes, Swap</button>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl, {
                    container: 'body',
                    html: true
                });
            });

            let selectedCells = [];
            let scheduleIds = [];

            document.querySelectorAll('.schedule-cell').forEach(cell => {
                const swapHint = document.getElementById('swapHint');
                cell.addEventListener('click', function () {
                    const scheduleId = this.dataset.scheduleId;
                    const sectionId = this.dataset.sectionId;

                    if (!scheduleId) return;

                    // Toggle highlight
                    this.classList.toggle('table-info');

                    // Track selection
                    if (!selectedCells.includes(this)) {
                        selectedCells.push(this);
                    } else {
                        // if cell deselected, remove from selectedCells array
                        selectedCells = selectedCells.filter(c => c !== this);
                    }
                    // Show or hide hint based on selection count
                    if (selectedCells.length === 1) {
                        swapHint.style.display = 'block';
                    } else {
                        swapHint.style.display = 'none';
                    }

                    // Once 2 cells are selected
                    if (selectedCells.length === 2) {
                        const sectionId1 = selectedCells[0].dataset.sectionId;
                        const sectionId2 = selectedCells[1].dataset.sectionId;
                        swapHint.style.display = 'none';

                        // If not same section, cancel
                        if (sectionId1 !== sectionId2) {
                            // Unhighlight and reset
                            selectedCells.forEach(c => c.classList.remove('table-info'));
                            selectedCells = [];
                            scheduleIds = [];

                            // Optional: show a tooltip or toast
                            alert("You can only swap schedules within the same section.");
                            return;
                        }
                     

                        // Continue with swap
                        scheduleIds = [
                            selectedCells[0].dataset.scheduleId,
                            selectedCells[1].dataset.scheduleId
                        ];

                        const confirmModal = new bootstrap.Modal(document.getElementById('confirmSwapModal'));
                        confirmModal.show();
                    }
                    // if no cells selected, hide hint
                    if (selectedCells.length === 0) {
                        swapHint.style.display = 'none';
                    }
                });
            });


            document.getElementById('confirmSwapBtn').addEventListener('click', function () {
                const [id1, id2] = scheduleIds;

                fetch(`/Home/SwapSchedules?scheduleId1=${id1}&scheduleId2=${id2}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    }
                })
                    .then(res => res.json())
                    .then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            const modalBody = document.getElementById("swapFeedbackBody");
                            modalBody.innerHTML = data.errors.map(e => `<div class="text-danger mb-2">• ${e}</div>`).join("");
                            const modal = new bootstrap.Modal(document.getElementById("swapFeedbackModal"));
                            modal.show();
                        }
                    })
                    .catch(err => {
                        const modalBody = document.getElementById("swapFeedbackBody");
                        modalBody.innerHTML = `<div class="text-danger">An unexpected error occurred: ${err}</div>`;
                        const modal = new bootstrap.Modal(document.getElementById("swapFeedbackModal"));
                        modal.show();
                    })
                    .finally(() => {
                        const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmSwapModal'));
                        confirmModal.hide();
                        selectedCells.forEach(c => c.classList.remove('table-info'));
                        selectedCells = [];
                        scheduleIds = [];
                    });
            });
        });
    </script>
}
