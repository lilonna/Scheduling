@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Schedules by Section";

}
<style>
    .schedule-cell {
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .table-info {
        background-color: #d0ebff !important;
    }
</style>



<div class="container mt-4">
    <h1 class="text-center mb-4">Schedules by Section</h1>




    @foreach (var batch in Model)
    {
        <div class="mb-5">
            <h2 class="mb-4">Batch: @batch.BatchName</h2>

            @foreach (var sectionGroup in batch.Sections)
            {
                <div class="mb-4">
                    <h3 class="h4 mb-3">Section: @sectionGroup.Section.Name</h3>

                    @{
                        var days = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var day = sched.TimeSlot.DaysOfWeek;
                            if (!days.Any(d => d.Id == day.Id))
                            {
                                days.Add(day);
                            }
                        }
                        days = days.OrderBy(d => d.Id).ToList();

                        var timeSlots = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var ts = sched.TimeSlot;
                            if (!timeSlots.Any(t => t.From == ts.From && t.To == ts.To))
                            {
                                timeSlots.Add(ts);
                            }
                        }
                        timeSlots = timeSlots.OrderBy(t => t.From).ToList();
                    }

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Time Slot</th>
                                    @foreach (var day in days)
                                    {
                                        <th class="text-center">@day.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var time in timeSlots)
                                {
                                    <tr>
                                        <td class="fw-semibold">@($"{time.From:hh\\:mm} - {time.To:hh\\:mm}")</td>
                                        @foreach (var day in days)
                                        {
                                            var matchedSchedule = ((IEnumerable<dynamic>)sectionGroup.Schedules).FirstOrDefault(s =>
                                            s.TimeSlot.From == time.From &&
                                            s.TimeSlot.To == time.To &&
                                            s.TimeSlot.DaysOfWeek.Id == day.Id);

                                            <td class="schedule-cell text-center"
                                                data-schedule-id="@matchedSchedule?.Id"
                                                data-section-id="@sectionGroup.Section.Id">
                                                @if (matchedSchedule != null)
                                                {
                                                    <div class="schedule-content">
                                                    
                                                        <div>
                                                            <a tabindex="0"
                                                               class="text-decoration-none text-primary"
                                                               role="button"
                                                               data-bs-toggle="popover"
                                                               data-bs-trigger="hover focus"
                                                               data-bs-placement="top"
                                                               title="Instructor"
                                                               data-bs-content="@matchedSchedule.Allocation.Instructor.FullName">
                                                                @matchedSchedule.Allocation.Course.Name
                                                            </a>


                                                        </div>
                                                        <div class="swap-switch mb-1" style="display:none;">
                                                            <div class="form-check form-switch d-flex justify-content-center">
                                                                <input class="form-check-input schedule-toggle" type="checkbox" id="swap-@matchedSchedule.Id">
                                                            </div>
                                                            <small class="text-muted text-center d-block mt-1">
                                                                To swap schedules, turn this on and click the target schedule.
                                                            </small>
                                                        </div>
                                                    </div>


                                                }

                                            </td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
</div>



<!-- Feedback Modal -->
<div class="modal fade" id="swapFeedbackModal" tabindex="-1" aria-labelledby="swapFeedbackLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="swapFeedbackLabel">Swap Failed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="swapFeedbackBody">
                <!-- Error content will be injected here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Confirm Swap Modal -->
<div class="modal fade" id="confirmSwapModal" tabindex="-1" aria-labelledby="confirmSwapLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-primary">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmSwapLabel">Confirm Swap</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to swap the selected classes?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="confirmSwapBtn" type="button" class="btn btn-primary">Yes, Swap</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let selectedCell = null;

        // Enable Bootstrap popovers
        document.querySelectorAll('[data-bs-toggle="popover"]').forEach(el => {
            new bootstrap.Popover(el);
        });

        function resetSelection() {
            if (selectedCell) {
                selectedCell.classList.remove('table-info');
                const switchDiv = selectedCell.querySelector('.swap-switch');
                if (switchDiv) switchDiv.style.display = 'none';
                const input = selectedCell.querySelector('.schedule-toggle');
                if (input) input.checked = false;

            }
            selectedCell = null;
        }

        document.querySelectorAll('.schedule-cell').forEach(cell => {
            const scheduleId = cell.dataset.scheduleId;
            if (!scheduleId) return;

            const switchContainer = cell.querySelector('.swap-switch');
            const switchInput = cell.querySelector('.schedule-toggle');

            // Click on cell
            cell.addEventListener('click', function () {
                if (!selectedCell) {
                    // First selection
                    if (switchContainer) switchContainer.style.display = 'block';
                } else if (cell !== selectedCell) {
                    // Second selection - perform swap check
                    if (cell.dataset.sectionId !== selectedCell.dataset.sectionId) {
                        alert("You can only swap within the same section.");
                        resetSelection();
                        return;
                    }

                    // Confirm modal
                    new bootstrap.Modal(document.getElementById('confirmSwapModal')).show();

                    // Store both ids for later
                    selectedCell.dataset.swapTargetId = cell.dataset.scheduleId;
                }
            });

            // Toggle swap on first cell
            if (switchInput) {
                switchInput.addEventListener('change', function () {
                    if (switchInput.checked) {
                        selectedCell = cell;
                        cell.classList.add('table-info');
                    } else {
                        cell.classList.remove('table-info');
                        selectedCell = null;
                        if (switchContainer) switchContainer.style.display = 'none';
                    }
                });
            }
        });

        // Confirm Swap
        document.getElementById('confirmSwapBtn').addEventListener('click', function () {
            const firstId = selectedCell?.dataset.scheduleId;
            const secondId = selectedCell?.dataset.swapTargetId;

            if (!firstId || !secondId) return;

            fetch(`/Home/SwapSchedules?scheduleId1=${firstId}&scheduleId2=${secondId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                }
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        document.getElementById("swapFeedbackBody").innerHTML =
                            data.errors.map(e => `<div class="text-danger mb-2">• ${e}</div>`).join("");
                        new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                    }
                })
                .catch(err => {
                    document.getElementById("swapFeedbackBody").innerHTML =
                        `<div class="text-danger">An unexpected error occurred: ${err}</div>`;
                    new bootstrap.Modal(document.getElementById("swapFeedbackModal")).show();
                })
                .finally(() => {
                    bootstrap.Modal.getInstance(document.getElementById('confirmSwapModal')).hide();
                    resetSelection();
                });
        });
    });
</script>

