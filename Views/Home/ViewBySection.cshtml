@model IEnumerable<dynamic>

@{
    ViewData["Title"] = "Schedules by Section";
}

<div class="container mt-4">
    <h1 class="text-center mb-4">Schedules by Section</h1>

    @foreach (var batch in Model)
    {
        <div class="mb-5">
            <h2 class="mb-4">Batch: @batch.BatchName</h2>

            @foreach (var sectionGroup in batch.Sections)
            {
                <div class="mb-4">
                    <h3 class="h4 mb-3">Section: @sectionGroup.Section.Name</h3>

                    @{
                        var days = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var day = sched.TimeSlot.DaysOfWeek;
                            if (!days.Any(d => d.Id == day.Id))
                            {
                                days.Add(day);
                            }
                        }
                        days = days.OrderBy(d => d.Id).ToList();

                        var timeSlots = new List<dynamic>();
                        foreach (var sched in sectionGroup.Schedules)
                        {
                            var ts = sched.TimeSlot;
                            if (!timeSlots.Any(t => t.From == ts.From && t.To == ts.To))
                            {
                                timeSlots.Add(ts);
                            }
                        }
                        timeSlots = timeSlots.OrderBy(t => t.From).ToList();
                    }

                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead class="table-light">
                                <tr>
                                    <th>Time Slot</th>
                                    @foreach (var day in days)
                                    {
                                        <th class="text-center">@day.Name</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var time in timeSlots)
                                {
                                    <tr>
                                        <td class="fw-semibold">@($"{time.From:hh\\:mm} - {time.To:hh\\:mm}")</td>

                                        @foreach (var day in days)
                                        {
                                            var matchedSchedule = ((IEnumerable<dynamic>)sectionGroup.Schedules).FirstOrDefault(s =>
                                            s.TimeSlot.From == time.From &&
                                            s.TimeSlot.To == time.To &&
                                            s.TimeSlot.DaysOfWeek.Id == day.Id);

                                            <td class="schedule-cell text-center"
                                                data-schedule-id="@matchedSchedule?.Id">
                                                @if (matchedSchedule != null)
                                                {
                                                    <a tabindex="0"
                                                       class="text-decoration-none text-primary"
                                                       role="button"
                                                       data-bs-toggle="popover"
                                                       data-bs-trigger="hover focus"
                                                       title="Instructor"
                                                       data-bs-content="@matchedSchedule.Allocation.Instructor.FullName">
                                                        @matchedSchedule.Allocation.Course.Name
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span class="text-muted fst-italic">-</span>
                                                }
                                            </td>

                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    }
</div>

@* @section Scripts {
    <script>
        // Enable all Bootstrap popovers
        document.addEventListener('DOMContentLoaded', function () {
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl, {
                    container: 'body',
                    html: true
                });
            });
        });
    </script> *@
    @section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Bootstrap popovers
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(popoverTriggerEl, {
                    container: 'body',
                    html: true
                });
            });
            
            // Swap logic
            let selectedCells = [];

            document.querySelectorAll('.schedule-cell').forEach(cell => {
                cell.addEventListener('click', function () {
                    const scheduleId = this.dataset.scheduleId;

                    if (!scheduleId) return;

                    this.classList.toggle('table-info');

                    if (!selectedCells.includes(this)) {
                        selectedCells.push(this);
                    }

                    if (selectedCells.length === 2) {
                        const id1 = selectedCells[0].dataset.scheduleId;
                        const id2 = selectedCells[1].dataset.scheduleId;

                        if (!confirm("Swap these two classes?")) {
                            selectedCells.forEach(c => c.classList.remove('table-info'));
                            selectedCells = [];
                            return;
                        }

                        fetch('/HomeController/SwapSchedules', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                            },
                            body: JSON.stringify({ scheduleId1: id1, scheduleId2: id2 })
                        })
                        .then(res => {
                            if (res.redirected) {
                                window.location.href = res.url;
                            } else {
                                alert("Swap failed.");
                            }
                        })
                        .catch(err => alert("Error: " + err))
                        .finally(() => {
                            selectedCells.forEach(c => c.classList.remove('table-info'));
                            selectedCells = [];
                        });
                    }
                });
            });
        });
    </script>
}

}